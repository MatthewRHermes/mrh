from pyscf import gto, scf, lib, mcscf
from mrh.my_pyscf.mcscf.lasscf_o0 import LASSCF
from mrh.my_pyscf import lassi
from mrh.my_pyscf import mcpdft
from c2h4n4_struct import structure as struct
from mrh.my_pyscf.lassi.spaces import all_single_excitations

'''
Two benchmarking tests
1. MCPDFT energies generated by the using this functionality should be equal to MC-PDFT energies from
the SA-LASPDFT.
2. SA-LASSCF -> LASSI -> LASSI-PDFT != SA-LASSCF + MCPDFT from this functionality.
'''

'''
I should have test case to check PDFT energies after CT states
'''

#-----------Test-1-------
mol = struct(0, 0, '6-31g')
mol.verbose = lib.logger.INFO
mol.build()

mf = scf.RHF(mol).run()

las = LASSCF(mf, (3,3), ((2,1),(1,2)))
las = las.state_average([0.5,0.5],spins=[[1,-1],[-1,1]], smults=[[2,2],[2,2]], charges=[[0,0],[0,0]], wfnsyms=[[1,1],[1,1]])
guess_mo = las.sort_mo([16,18,22,23,24,26])
mo0 = las.localize_init_guess((list(range (5)), list(range (5,10))), guess_mo)
las.kernel(mo0)

mc1 = mcpdft.LASSCF(las, 'tPBE', DoPreLASSI=True)
e1 = mc1.kernel()[0]

# Reference Values
mc = mcpdft.LASSCF(mf, 'tPBE', (3, 3), ((2,1),(1,2)))
guess_mo = mc.sort_mo([16,18,22,23,24,26])
mo0 = mc.localize_init_guess((list(range(5)), list(range(5,10))), guess_mo)
mc = mc.state_average([0.5,0.5],spins=[[1,-1],[-1,1]],smults=[[2,2],[2,2]],charges=[[0,0],[0,0]], wfnsyms=[[1,1],[1,1]])
e2 = mc.kernel(mo0)[0]

if all(abs(x - y) < 1e-8 for x, y in zip(e1, e2)): print("First Test Passed")

del mol, mf, las, mc, mc1


#---------Test-2--------------
mol = struct(0, 0, '6-31g')
mol.verbose = lib.logger.INFO
mol.build()

mf = scf.RHF(mol).run()

las = LASSCF(mf, (3,3), ((2,1),(1,2)))
las = las.state_average([0.5,0.5],spins=[[1,-1],[-1,1]], smults=[[2,2],[2,2]], charges=[[0,0],[0,0]], wfnsyms=[[1,1],[1,1]])
guess_mo = las.sort_mo([16,18,22,23,24,26])
mo0 = las.localize_init_guess((list(range (5)), list(range (5,10))), guess_mo)
las.kernel(mo0)

mc1 = mcpdft.LASSCF(las, 'tPBE', DoPreLASSI=True)
e1 = mc1.kernel()[0]

lsi = lassi.LASSI(las)
lsi.kernel()

mc = mcpdft.LASSI(lsi, 'tPBE')
e2 = mc.kernel()[0]

if (all(abs(x - y) > 1e-6 for x, y in zip(e1, e2))): print("Second Test Passed")
